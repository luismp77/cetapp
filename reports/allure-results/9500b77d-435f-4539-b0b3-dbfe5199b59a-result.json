{"name": "Validar ABM rol base", "status": "broken", "statusDetails": {"message": "OSError: [WinError 193] %1 no es una aplicaci칩n Win32 v치lida", "trace": "request = <SubRequest 'driver' for <Function test_rol_base>>\n\n    @pytest.fixture(autouse=True)\n    def driver(request):\n        \"\"\"\n        Fixture para inicializar el driver del navegador\n        \"\"\"\n>       driver = BrowserConfig(os.getenv(\"browser\")).select_browser()\n\nconftest.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconfig\\browser.py:30: in select_browser\n    self.driver = webdriver.Chrome(service=Service(\nautoTest\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nautoTest\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:50: in __init__\n    self.service.start()\nautoTest\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:98: in start\n    self._start_process(self._path)\nautoTest\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:208: in _start_process\n    self.process = subprocess.Popen(\nC:\\Users\\anios\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['C:\\\\Users\\\\anios\\\\.wdm\\\\drivers\\\\chromedriv...>\nargs = 'C:\\\\Users\\\\anios\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\128.0.6613.119\\\\chromedriver-win32/THIRD_PARTY_NOTICES.chromedriver --port=59382'\nexecutable = None, preexec_fn = None, close_fds = False, pass_fds = (), cwd = None\nenv = environ({'ALLURE_HOME': 'C:\\\\Users\\\\anios\\\\scoop\\\\apps\\\\allure\\\\current', 'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'APPDA...ER': 'chrome', 'NOMBREARCHIVO': 'datos', 'PYTEST_CURRENT_TEST': 'test/test_abm_roles.py::Test::test_rol_base (setup)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x0000024DEACC68A0>, creationflags = 0, shell = False\np2cread = Handle(1008), p2cwrite = 7, c2pread = -1, c2pwrite = Handle(928), errread = -1\nerrwrite = Handle(1004), unused_restore_signals = True, unused_gid = None, unused_gids = None\nunused_uid = None, unused_umask = -1, unused_start_new_session = False, unused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            if not executable:\n                # gh-101283: without a fully-qualified path, before Windows\n                # checks the system directories, it first looks in the\n                # application directory, and also the current directory if\n                # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                # to avoid executing unqualified \"cmd.exe\".\n                comspec = os.environ.get('ComSpec')\n                if not comspec:\n                    system_root = os.environ.get('SystemRoot', '')\n                    comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                    if not os.path.isabs(comspec):\n                        raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                if os.path.isabs(comspec):\n                    executable = comspec\n            else:\n                comspec = executable\n    \n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    OSError: [WinError 193] %1 no es una aplicaci칩n Win32 v치lida\n\nC:\\Users\\anios\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:1538: OSError"}, "description": "Validar configuracion de rol base", "start": 1725697188437, "stop": 1725697188437, "uuid": "7245154b-8b5a-4e1c-8c1d-a857a6d2916e", "historyId": "b6688147040a69111b5d40cfc44d4dc1", "testCaseId": "b6688147040a69111b5d40cfc44d4dc1", "fullName": "test.test_abm_roles.Test#test_rol_base", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_abm_roles"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "Familia"}, {"name": "thread", "value": "10388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_abm_roles"}]}